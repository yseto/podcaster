//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Entry defines model for Entry.
type Entry struct {
	Description string `json:"description"`
	ID          uint64 `json:"id"`
	New         bool   `json:"new"`
	PublishedAt string `json:"publishedAt"`
	Title       string `json:"title"`
	Url         string `json:"url"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ID    uint64 `json:"id"`
	Title string `json:"title"`
	Url   string `json:"url"`
}

// RegisterSubscriptionJSONBody defines parameters for RegisterSubscription.
type RegisterSubscriptionJSONBody struct {
	Url string `json:"url"`
}

// RegisterSubscriptionJSONRequestBody defines body for RegisterSubscription for application/json ContentType.
type RegisterSubscriptionJSONRequestBody RegisterSubscriptionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Index(w http.ResponseWriter, r *http.Request)

	// (POST /api/subscription)
	RegisterSubscription(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/subscription/{id})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/subscription/{id})
	GetEntries(w http.ResponseWriter, r *http.Request, id int)

	// (POST /api/subscription/{id}/-/fetch)
	FetchSubscription(w http.ResponseWriter, r *http.Request, id int)

	// (DELETE /api/subscription/{id}/{entryId})
	DeleteEntry(w http.ResponseWriter, r *http.Request, id int, entryId int)

	// (POST /api/subscription/{id}/{entryId}/open)
	OpenedEntry(w http.ResponseWriter, r *http.Request, id int, entryId int)

	// (GET /api/subscriptions)
	Subscriptions(w http.ResponseWriter, r *http.Request)

	// (GET /app.js)
	IndexFile(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Index operation middleware
func (siw *ServerInterfaceWrapper) Index(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Index(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterSubscription operation middleware
func (siw *ServerInterfaceWrapper) RegisterSubscription(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEntries operation middleware
func (siw *ServerInterfaceWrapper) GetEntries(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEntries(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// FetchSubscription operation middleware
func (siw *ServerInterfaceWrapper) FetchSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FetchSubscription(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEntry operation middleware
func (siw *ServerInterfaceWrapper) DeleteEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "entryId" -------------
	var entryId int

	err = runtime.BindStyledParameterWithOptions("simple", "entryId", r.PathValue("entryId"), &entryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entryId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEntry(w, r, id, entryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OpenedEntry operation middleware
func (siw *ServerInterfaceWrapper) OpenedEntry(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "entryId" -------------
	var entryId int

	err = runtime.BindStyledParameterWithOptions("simple", "entryId", r.PathValue("entryId"), &entryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entryId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OpenedEntry(w, r, id, entryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Subscriptions operation middleware
func (siw *ServerInterfaceWrapper) Subscriptions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Subscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// IndexFile operation middleware
func (siw *ServerInterfaceWrapper) IndexFile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IndexFile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.Index)
	m.HandleFunc("POST "+options.BaseURL+"/api/subscription", wrapper.RegisterSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/subscription/{id}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/api/subscription/{id}", wrapper.GetEntries)
	m.HandleFunc("POST "+options.BaseURL+"/api/subscription/{id}/-/fetch", wrapper.FetchSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/subscription/{id}/{entryId}", wrapper.DeleteEntry)
	m.HandleFunc("POST "+options.BaseURL+"/api/subscription/{id}/{entryId}/open", wrapper.OpenedEntry)
	m.HandleFunc("GET "+options.BaseURL+"/api/subscriptions", wrapper.Subscriptions)
	m.HandleFunc("GET "+options.BaseURL+"/app.js", wrapper.IndexFile)

	return m
}

type IndexRequestObject struct {
}

type IndexResponseObject interface {
	VisitIndexResponse(w http.ResponseWriter) error
}

type Index200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response Index200TexthtmlResponse) VisitIndexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type RegisterSubscriptionRequestObject struct {
	Body *RegisterSubscriptionJSONRequestBody
}

type RegisterSubscriptionResponseObject interface {
	VisitRegisterSubscriptionResponse(w http.ResponseWriter) error
}

type RegisterSubscription200JSONResponse Subscription

func (response RegisterSubscription200JSONResponse) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterSubscription400Response struct {
}

func (response RegisterSubscription400Response) VisitRegisterSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteSubscriptionRequestObject struct {
	Id int `json:"id"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription204Response struct {
}

func (response DeleteSubscription204Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSubscription400Response struct {
}

func (response DeleteSubscription400Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteSubscription404Response struct {
}

func (response DeleteSubscription404Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetEntriesRequestObject struct {
	Id int `json:"id"`
}

type GetEntriesResponseObject interface {
	VisitGetEntriesResponse(w http.ResponseWriter) error
}

type GetEntries200JSONResponse []Entry

func (response GetEntries200JSONResponse) VisitGetEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEntries400Response struct {
}

func (response GetEntries400Response) VisitGetEntriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetEntries404Response struct {
}

func (response GetEntries404Response) VisitGetEntriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FetchSubscriptionRequestObject struct {
	Id int `json:"id"`
}

type FetchSubscriptionResponseObject interface {
	VisitFetchSubscriptionResponse(w http.ResponseWriter) error
}

type FetchSubscription202Response struct {
}

func (response FetchSubscription202Response) VisitFetchSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type FetchSubscription404Response struct {
}

func (response FetchSubscription404Response) VisitFetchSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteEntryRequestObject struct {
	Id      int `json:"id"`
	EntryId int `json:"entryId"`
}

type DeleteEntryResponseObject interface {
	VisitDeleteEntryResponse(w http.ResponseWriter) error
}

type DeleteEntry202Response struct {
}

func (response DeleteEntry202Response) VisitDeleteEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type DeleteEntry404Response struct {
}

func (response DeleteEntry404Response) VisitDeleteEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type OpenedEntryRequestObject struct {
	Id      int `json:"id"`
	EntryId int `json:"entryId"`
}

type OpenedEntryResponseObject interface {
	VisitOpenedEntryResponse(w http.ResponseWriter) error
}

type OpenedEntry202Response struct {
}

func (response OpenedEntry202Response) VisitOpenedEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type OpenedEntry404Response struct {
}

func (response OpenedEntry404Response) VisitOpenedEntryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscriptionsRequestObject struct {
}

type SubscriptionsResponseObject interface {
	VisitSubscriptionsResponse(w http.ResponseWriter) error
}

type Subscriptions200JSONResponse []Subscription

func (response Subscriptions200JSONResponse) VisitSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Subscriptions400Response struct {
}

func (response Subscriptions400Response) VisitSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type IndexFileRequestObject struct {
}

type IndexFileResponseObject interface {
	VisitIndexFileResponse(w http.ResponseWriter) error
}

type IndexFile200TextjavascriptResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response IndexFile200TextjavascriptResponse) VisitIndexFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/javascript")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /)
	Index(ctx context.Context, request IndexRequestObject) (IndexResponseObject, error)

	// (POST /api/subscription)
	RegisterSubscription(ctx context.Context, request RegisterSubscriptionRequestObject) (RegisterSubscriptionResponseObject, error)

	// (DELETE /api/subscription/{id})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)

	// (GET /api/subscription/{id})
	GetEntries(ctx context.Context, request GetEntriesRequestObject) (GetEntriesResponseObject, error)

	// (POST /api/subscription/{id}/-/fetch)
	FetchSubscription(ctx context.Context, request FetchSubscriptionRequestObject) (FetchSubscriptionResponseObject, error)

	// (DELETE /api/subscription/{id}/{entryId})
	DeleteEntry(ctx context.Context, request DeleteEntryRequestObject) (DeleteEntryResponseObject, error)

	// (POST /api/subscription/{id}/{entryId}/open)
	OpenedEntry(ctx context.Context, request OpenedEntryRequestObject) (OpenedEntryResponseObject, error)

	// (GET /api/subscriptions)
	Subscriptions(ctx context.Context, request SubscriptionsRequestObject) (SubscriptionsResponseObject, error)

	// (GET /app.js)
	IndexFile(ctx context.Context, request IndexFileRequestObject) (IndexFileResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Index operation middleware
func (sh *strictHandler) Index(w http.ResponseWriter, r *http.Request) {
	var request IndexRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Index(ctx, request.(IndexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Index")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IndexResponseObject); ok {
		if err := validResponse.VisitIndexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterSubscription operation middleware
func (sh *strictHandler) RegisterSubscription(w http.ResponseWriter, r *http.Request) {
	var request RegisterSubscriptionRequestObject

	var body RegisterSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterSubscription(ctx, request.(RegisterSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterSubscriptionResponseObject); ok {
		if err := validResponse.VisitRegisterSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteSubscriptionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEntries operation middleware
func (sh *strictHandler) GetEntries(w http.ResponseWriter, r *http.Request, id int) {
	var request GetEntriesRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEntries(ctx, request.(GetEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEntriesResponseObject); ok {
		if err := validResponse.VisitGetEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FetchSubscription operation middleware
func (sh *strictHandler) FetchSubscription(w http.ResponseWriter, r *http.Request, id int) {
	var request FetchSubscriptionRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FetchSubscription(ctx, request.(FetchSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FetchSubscriptionResponseObject); ok {
		if err := validResponse.VisitFetchSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEntry operation middleware
func (sh *strictHandler) DeleteEntry(w http.ResponseWriter, r *http.Request, id int, entryId int) {
	var request DeleteEntryRequestObject

	request.Id = id
	request.EntryId = entryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEntry(ctx, request.(DeleteEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEntryResponseObject); ok {
		if err := validResponse.VisitDeleteEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// OpenedEntry operation middleware
func (sh *strictHandler) OpenedEntry(w http.ResponseWriter, r *http.Request, id int, entryId int) {
	var request OpenedEntryRequestObject

	request.Id = id
	request.EntryId = entryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.OpenedEntry(ctx, request.(OpenedEntryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OpenedEntry")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(OpenedEntryResponseObject); ok {
		if err := validResponse.VisitOpenedEntryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Subscriptions operation middleware
func (sh *strictHandler) Subscriptions(w http.ResponseWriter, r *http.Request) {
	var request SubscriptionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Subscriptions(ctx, request.(SubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Subscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SubscriptionsResponseObject); ok {
		if err := validResponse.VisitSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IndexFile operation middleware
func (sh *strictHandler) IndexFile(w http.ResponseWriter, r *http.Request) {
	var request IndexFileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IndexFile(ctx, request.(IndexFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IndexFile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IndexFileResponseObject); ok {
		if err := validResponse.VisitIndexFileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT1PbPhD9Kr/ZX48mSmmmB9/oUDpMD3TKkclBsTexMrakSmtKJqPv3lmJEEzskKaU",
	"9tALOKt/7719K+0aCtNYo1GTh3wNvqiwkfHzoya34g/rjEVHCmO4RF84ZUkZzT9pZRFy8OSUXkDIQJUc",
	"nhvXSIIcWqXp/QSyzUSlCRfoIIO7k4U50bLh6OU5L9X4/dGWM2NqlJoHbDurla+wPKPeM0lRjb0jrat7",
	"4iEDh99a5bCE/IYhb/bIOvzS+gSsi2L6QMjMllgQn3XdzjrSdHX7BV1ekh6v2AUfMvBYtE7R6podkCDP",
	"pFfFWUvVgzNiXji6BV4RWQi8g9JzE9EkuPDFlIX0FEndovNRFng7GjNyY1FLqyCHd6PxaMzySqrisYL/",
	"LDCmmhWULOhlyXLoEu+A2XlrtE8oT8dj/lcYTaiTP/COREVNvXV0n0qhm+wcrj5zNGQgpFXCP02n8T2Q",
	"vuJCMcdO8pP+6OmDKVdPwElra1XEDcTSp623GLueOSi9AxlN0/bqtB/KG4dzyOF/sb0hxP31IDpsB5TM",
	"YJJO7A6hc8YN6SzWqgxpTY2Eu3Kfx/gTsa10skFC5yG/WYPiY9hNXLmpjmIJbEUj12K264xNDYYw3dFu",
	"ssvkeZI8OtkjQdZv809IfPmyCV6H3M8ZQxE2/jmHpNcjPPhSOidXx1llQEVt6L+5aXW510ziRMyRimq4",
	"gi94+A846nTYUZNjykaskTW/PKSAUnZ+B8+sd5d7ZH+vZILfo2GPXFnUWP5TzQ8+zdedWa9xw3TfoJe4",
	"aDac7Wjp9/cgFyo2U4f0IUt5K9NZx3Ujj1qz6LZHTdnNNEzDjwAAAP//0FVtqcILAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
