// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yseto/podcaster/ent/entries"
	"github.com/yseto/podcaster/ent/feeds"
	"github.com/yseto/podcaster/ent/predicate"
)

// FeedsUpdate is the builder for updating Feeds entities.
type FeedsUpdate struct {
	config
	hooks     []Hook
	mutation  *FeedsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeedsUpdate builder.
func (fu *FeedsUpdate) Where(ps ...predicate.Feeds) *FeedsUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTitle sets the "title" field.
func (fu *FeedsUpdate) SetTitle(s string) *FeedsUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableTitle(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetTitle(*s)
	}
	return fu
}

// SetURL sets the "url" field.
func (fu *FeedsUpdate) SetURL(s string) *FeedsUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fu *FeedsUpdate) SetNillableURL(s *string) *FeedsUpdate {
	if s != nil {
		fu.SetURL(*s)
	}
	return fu
}

// AddEntryIDs adds the "entries" edge to the Entries entity by IDs.
func (fu *FeedsUpdate) AddEntryIDs(ids ...int) *FeedsUpdate {
	fu.mutation.AddEntryIDs(ids...)
	return fu
}

// AddEntries adds the "entries" edges to the Entries entity.
func (fu *FeedsUpdate) AddEntries(e ...*Entries) *FeedsUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEntryIDs(ids...)
}

// Mutation returns the FeedsMutation object of the builder.
func (fu *FeedsUpdate) Mutation() *FeedsMutation {
	return fu.mutation
}

// ClearEntries clears all "entries" edges to the Entries entity.
func (fu *FeedsUpdate) ClearEntries() *FeedsUpdate {
	fu.mutation.ClearEntries()
	return fu
}

// RemoveEntryIDs removes the "entries" edge to Entries entities by IDs.
func (fu *FeedsUpdate) RemoveEntryIDs(ids ...int) *FeedsUpdate {
	fu.mutation.RemoveEntryIDs(ids...)
	return fu
}

// RemoveEntries removes "entries" edges to Entries entities.
func (fu *FeedsUpdate) RemoveEntries(e ...*Entries) *FeedsUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedsUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedsUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedsUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FeedsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeedsUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FeedsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(feeds.Table, feeds.Columns, sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(feeds.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.SetField(feeds.FieldURL, field.TypeString, value)
	}
	if fu.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feeds.EntriesTable,
			Columns: []string{feeds.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedEntriesIDs(); len(nodes) > 0 && !fu.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feeds.EntriesTable,
			Columns: []string{feeds.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feeds.EntriesTable,
			Columns: []string{feeds.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedsUpdateOne is the builder for updating a single Feeds entity.
type FeedsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeedsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTitle sets the "title" field.
func (fuo *FeedsUpdateOne) SetTitle(s string) *FeedsUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableTitle(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetTitle(*s)
	}
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FeedsUpdateOne) SetURL(s string) *FeedsUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (fuo *FeedsUpdateOne) SetNillableURL(s *string) *FeedsUpdateOne {
	if s != nil {
		fuo.SetURL(*s)
	}
	return fuo
}

// AddEntryIDs adds the "entries" edge to the Entries entity by IDs.
func (fuo *FeedsUpdateOne) AddEntryIDs(ids ...int) *FeedsUpdateOne {
	fuo.mutation.AddEntryIDs(ids...)
	return fuo
}

// AddEntries adds the "entries" edges to the Entries entity.
func (fuo *FeedsUpdateOne) AddEntries(e ...*Entries) *FeedsUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEntryIDs(ids...)
}

// Mutation returns the FeedsMutation object of the builder.
func (fuo *FeedsUpdateOne) Mutation() *FeedsMutation {
	return fuo.mutation
}

// ClearEntries clears all "entries" edges to the Entries entity.
func (fuo *FeedsUpdateOne) ClearEntries() *FeedsUpdateOne {
	fuo.mutation.ClearEntries()
	return fuo
}

// RemoveEntryIDs removes the "entries" edge to Entries entities by IDs.
func (fuo *FeedsUpdateOne) RemoveEntryIDs(ids ...int) *FeedsUpdateOne {
	fuo.mutation.RemoveEntryIDs(ids...)
	return fuo
}

// RemoveEntries removes "entries" edges to Entries entities.
func (fuo *FeedsUpdateOne) RemoveEntries(e ...*Entries) *FeedsUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEntryIDs(ids...)
}

// Where appends a list predicates to the FeedsUpdate builder.
func (fuo *FeedsUpdateOne) Where(ps ...predicate.Feeds) *FeedsUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedsUpdateOne) Select(field string, fields ...string) *FeedsUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feeds entity.
func (fuo *FeedsUpdateOne) Save(ctx context.Context) (*Feeds, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedsUpdateOne) SaveX(ctx context.Context) *Feeds {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedsUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedsUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FeedsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeedsUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FeedsUpdateOne) sqlSave(ctx context.Context) (_node *Feeds, err error) {
	_spec := sqlgraph.NewUpdateSpec(feeds.Table, feeds.Columns, sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feeds.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feeds.FieldID)
		for _, f := range fields {
			if !feeds.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feeds.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(feeds.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.SetField(feeds.FieldURL, field.TypeString, value)
	}
	if fuo.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feeds.EntriesTable,
			Columns: []string{feeds.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedEntriesIDs(); len(nodes) > 0 && !fuo.mutation.EntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feeds.EntriesTable,
			Columns: []string{feeds.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feeds.EntriesTable,
			Columns: []string{feeds.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Feeds{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeds.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
