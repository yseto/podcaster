// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yseto/podcaster/ent/entries"
	"github.com/yseto/podcaster/ent/feeds"
)

// Entries is the model entity for the Entries schema.
type Entries struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt time.Time `json:"published_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntriesQuery when eager-loading is set.
	Edges         EntriesEdges `json:"edges"`
	feeds_entries *int
	selectValues  sql.SelectValues
}

// EntriesEdges holds the relations/edges for other nodes in the graph.
type EntriesEdges struct {
	// Feeds holds the value of the feeds edge.
	Feeds *Feeds `json:"feeds,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FeedsOrErr returns the Feeds value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntriesEdges) FeedsOrErr() (*Feeds, error) {
	if e.Feeds != nil {
		return e.Feeds, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: feeds.Label}
	}
	return nil, &NotLoadedError{edge: "feeds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entries) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entries.FieldID:
			values[i] = new(sql.NullInt64)
		case entries.FieldTitle, entries.FieldDescription, entries.FieldURL:
			values[i] = new(sql.NullString)
		case entries.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		case entries.ForeignKeys[0]: // feeds_entries
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entries fields.
func (e *Entries) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entries.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case entries.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case entries.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case entries.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				e.URL = value.String
			}
		case entries.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				e.PublishedAt = value.Time
			}
		case entries.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field feeds_entries", value)
			} else if value.Valid {
				e.feeds_entries = new(int)
				*e.feeds_entries = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Entries.
// This includes values selected through modifiers, order, etc.
func (e *Entries) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryFeeds queries the "feeds" edge of the Entries entity.
func (e *Entries) QueryFeeds() *FeedsQuery {
	return NewEntriesClient(e.config).QueryFeeds(e)
}

// Update returns a builder for updating this Entries.
// Note that you need to call Entries.Unwrap() before calling this method if this Entries
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entries) Update() *EntriesUpdateOne {
	return NewEntriesClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entries entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entries) Unwrap() *Entries {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entries is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entries) String() string {
	var builder strings.Builder
	builder.WriteString("Entries(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(e.URL)
	builder.WriteString(", ")
	builder.WriteString("published_at=")
	builder.WriteString(e.PublishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EntriesSlice is a parsable slice of Entries.
type EntriesSlice []*Entries
