// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yseto/podcaster/ent/entries"
	"github.com/yseto/podcaster/ent/feeds"
	"github.com/yseto/podcaster/ent/predicate"
)

// EntriesUpdate is the builder for updating Entries entities.
type EntriesUpdate struct {
	config
	hooks    []Hook
	mutation *EntriesMutation
}

// Where appends a list predicates to the EntriesUpdate builder.
func (eu *EntriesUpdate) Where(ps ...predicate.Entries) *EntriesUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetTitle sets the "title" field.
func (eu *EntriesUpdate) SetTitle(s string) *EntriesUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EntriesUpdate) SetNillableTitle(s *string) *EntriesUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *EntriesUpdate) SetDescription(s string) *EntriesUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EntriesUpdate) SetNillableDescription(s *string) *EntriesUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetURL sets the "url" field.
func (eu *EntriesUpdate) SetURL(s string) *EntriesUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eu *EntriesUpdate) SetNillableURL(s *string) *EntriesUpdate {
	if s != nil {
		eu.SetURL(*s)
	}
	return eu
}

// SetFeedsID sets the "feeds" edge to the Feeds entity by ID.
func (eu *EntriesUpdate) SetFeedsID(id int) *EntriesUpdate {
	eu.mutation.SetFeedsID(id)
	return eu
}

// SetNillableFeedsID sets the "feeds" edge to the Feeds entity by ID if the given value is not nil.
func (eu *EntriesUpdate) SetNillableFeedsID(id *int) *EntriesUpdate {
	if id != nil {
		eu = eu.SetFeedsID(*id)
	}
	return eu
}

// SetFeeds sets the "feeds" edge to the Feeds entity.
func (eu *EntriesUpdate) SetFeeds(f *Feeds) *EntriesUpdate {
	return eu.SetFeedsID(f.ID)
}

// Mutation returns the EntriesMutation object of the builder.
func (eu *EntriesUpdate) Mutation() *EntriesMutation {
	return eu.mutation
}

// ClearFeeds clears the "feeds" edge to the Feeds entity.
func (eu *EntriesUpdate) ClearFeeds() *EntriesUpdate {
	eu.mutation.ClearFeeds()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntriesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntriesUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntriesUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntriesUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EntriesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entries.Table, entries.Columns, sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(entries.FieldTitle, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(entries.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.SetField(entries.FieldURL, field.TypeString, value)
	}
	if eu.mutation.FeedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entries.FeedsTable,
			Columns: []string{entries.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entries.FeedsTable,
			Columns: []string{entries.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entries.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntriesUpdateOne is the builder for updating a single Entries entity.
type EntriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntriesMutation
}

// SetTitle sets the "title" field.
func (euo *EntriesUpdateOne) SetTitle(s string) *EntriesUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EntriesUpdateOne) SetNillableTitle(s *string) *EntriesUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *EntriesUpdateOne) SetDescription(s string) *EntriesUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EntriesUpdateOne) SetNillableDescription(s *string) *EntriesUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetURL sets the "url" field.
func (euo *EntriesUpdateOne) SetURL(s string) *EntriesUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (euo *EntriesUpdateOne) SetNillableURL(s *string) *EntriesUpdateOne {
	if s != nil {
		euo.SetURL(*s)
	}
	return euo
}

// SetFeedsID sets the "feeds" edge to the Feeds entity by ID.
func (euo *EntriesUpdateOne) SetFeedsID(id int) *EntriesUpdateOne {
	euo.mutation.SetFeedsID(id)
	return euo
}

// SetNillableFeedsID sets the "feeds" edge to the Feeds entity by ID if the given value is not nil.
func (euo *EntriesUpdateOne) SetNillableFeedsID(id *int) *EntriesUpdateOne {
	if id != nil {
		euo = euo.SetFeedsID(*id)
	}
	return euo
}

// SetFeeds sets the "feeds" edge to the Feeds entity.
func (euo *EntriesUpdateOne) SetFeeds(f *Feeds) *EntriesUpdateOne {
	return euo.SetFeedsID(f.ID)
}

// Mutation returns the EntriesMutation object of the builder.
func (euo *EntriesUpdateOne) Mutation() *EntriesMutation {
	return euo.mutation
}

// ClearFeeds clears the "feeds" edge to the Feeds entity.
func (euo *EntriesUpdateOne) ClearFeeds() *EntriesUpdateOne {
	euo.mutation.ClearFeeds()
	return euo
}

// Where appends a list predicates to the EntriesUpdate builder.
func (euo *EntriesUpdateOne) Where(ps ...predicate.Entries) *EntriesUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntriesUpdateOne) Select(field string, fields ...string) *EntriesUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entries entity.
func (euo *EntriesUpdateOne) Save(ctx context.Context) (*Entries, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntriesUpdateOne) SaveX(ctx context.Context) *Entries {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntriesUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntriesUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EntriesUpdateOne) sqlSave(ctx context.Context) (_node *Entries, err error) {
	_spec := sqlgraph.NewUpdateSpec(entries.Table, entries.Columns, sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entries.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entries.FieldID)
		for _, f := range fields {
			if !entries.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entries.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(entries.FieldTitle, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(entries.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.SetField(entries.FieldURL, field.TypeString, value)
	}
	if euo.mutation.FeedsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entries.FeedsTable,
			Columns: []string{entries.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entries.FeedsTable,
			Columns: []string{entries.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entries{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entries.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
