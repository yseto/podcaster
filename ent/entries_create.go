// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yseto/podcaster/ent/entries"
	"github.com/yseto/podcaster/ent/feeds"
)

// EntriesCreate is the builder for creating a Entries entity.
type EntriesCreate struct {
	config
	mutation *EntriesMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ec *EntriesCreate) SetTitle(s string) *EntriesCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EntriesCreate) SetDescription(s string) *EntriesCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetURL sets the "url" field.
func (ec *EntriesCreate) SetURL(s string) *EntriesCreate {
	ec.mutation.SetURL(s)
	return ec
}

// SetPublishedAt sets the "published_at" field.
func (ec *EntriesCreate) SetPublishedAt(t time.Time) *EntriesCreate {
	ec.mutation.SetPublishedAt(t)
	return ec
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (ec *EntriesCreate) SetNillablePublishedAt(t *time.Time) *EntriesCreate {
	if t != nil {
		ec.SetPublishedAt(*t)
	}
	return ec
}

// SetFeedsID sets the "feeds" edge to the Feeds entity by ID.
func (ec *EntriesCreate) SetFeedsID(id int) *EntriesCreate {
	ec.mutation.SetFeedsID(id)
	return ec
}

// SetNillableFeedsID sets the "feeds" edge to the Feeds entity by ID if the given value is not nil.
func (ec *EntriesCreate) SetNillableFeedsID(id *int) *EntriesCreate {
	if id != nil {
		ec = ec.SetFeedsID(*id)
	}
	return ec
}

// SetFeeds sets the "feeds" edge to the Feeds entity.
func (ec *EntriesCreate) SetFeeds(f *Feeds) *EntriesCreate {
	return ec.SetFeedsID(f.ID)
}

// Mutation returns the EntriesMutation object of the builder.
func (ec *EntriesCreate) Mutation() *EntriesMutation {
	return ec.mutation
}

// Save creates the Entries in the database.
func (ec *EntriesCreate) Save(ctx context.Context) (*Entries, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntriesCreate) SaveX(ctx context.Context) *Entries {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntriesCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntriesCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntriesCreate) defaults() {
	if _, ok := ec.mutation.PublishedAt(); !ok {
		v := entries.DefaultPublishedAt
		ec.mutation.SetPublishedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntriesCreate) check() error {
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Entries.title"`)}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Entries.description"`)}
	}
	if _, ok := ec.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Entries.url"`)}
	}
	return nil
}

func (ec *EntriesCreate) sqlSave(ctx context.Context) (*Entries, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntriesCreate) createSpec() (*Entries, *sqlgraph.CreateSpec) {
	var (
		_node = &Entries{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entries.Table, sqlgraph.NewFieldSpec(entries.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(entries.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(entries.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.URL(); ok {
		_spec.SetField(entries.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ec.mutation.PublishedAt(); ok {
		_spec.SetField(entries.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = value
	}
	if nodes := ec.mutation.FeedsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entries.FeedsTable,
			Columns: []string{entries.FeedsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feeds.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.feeds_entries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntriesCreateBulk is the builder for creating many Entries entities in bulk.
type EntriesCreateBulk struct {
	config
	err      error
	builders []*EntriesCreate
}

// Save creates the Entries entities in the database.
func (ecb *EntriesCreateBulk) Save(ctx context.Context) ([]*Entries, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entries, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntriesCreateBulk) SaveX(ctx context.Context) []*Entries {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntriesCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntriesCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
