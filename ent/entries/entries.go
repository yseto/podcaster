// Code generated by ent, DO NOT EDIT.

package entries

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entries type in the database.
	Label = "entries"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// EdgeFeeds holds the string denoting the feeds edge name in mutations.
	EdgeFeeds = "feeds"
	// Table holds the table name of the entries in the database.
	Table = "entries"
	// FeedsTable is the table that holds the feeds relation/edge.
	FeedsTable = "entries"
	// FeedsInverseTable is the table name for the Feeds entity.
	// It exists in this package in order to avoid circular dependency with the "feeds" package.
	FeedsInverseTable = "feeds"
	// FeedsColumn is the table column denoting the feeds relation/edge.
	FeedsColumn = "feeds_entries"
)

// Columns holds all SQL columns for entries fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldURL,
	FieldPublishedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"feeds_entries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPublishedAt holds the default value on creation for the "published_at" field.
	DefaultPublishedAt time.Time
)

// OrderOption defines the ordering options for the Entries queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByFeedsField orders the results by feeds field.
func ByFeedsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedsStep(), sql.OrderByField(field, opts...))
	}
}
func newFeedsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FeedsTable, FeedsColumn),
	)
}
