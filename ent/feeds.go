// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yseto/podcaster/ent/feeds"
)

// Feeds is the model entity for the Feeds schema.
type Feeds struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedsQuery when eager-loading is set.
	Edges        FeedsEdges `json:"edges"`
	users_feeds  *int
	selectValues sql.SelectValues
}

// FeedsEdges holds the relations/edges for other nodes in the graph.
type FeedsEdges struct {
	// Entries holds the value of the entries edge.
	Entries []*Entries `json:"entries,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntriesOrErr returns the Entries value or an error if the edge
// was not loaded in eager-loading.
func (e FeedsEdges) EntriesOrErr() ([]*Entries, error) {
	if e.loadedTypes[0] {
		return e.Entries, nil
	}
	return nil, &NotLoadedError{edge: "entries"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feeds) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feeds.FieldID:
			values[i] = new(sql.NullInt64)
		case feeds.FieldTitle, feeds.FieldURL:
			values[i] = new(sql.NullString)
		case feeds.ForeignKeys[0]: // users_feeds
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feeds fields.
func (f *Feeds) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feeds.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case feeds.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		case feeds.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				f.URL = value.String
			}
		case feeds.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field users_feeds", value)
			} else if value.Valid {
				f.users_feeds = new(int)
				*f.users_feeds = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feeds.
// This includes values selected through modifiers, order, etc.
func (f *Feeds) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryEntries queries the "entries" edge of the Feeds entity.
func (f *Feeds) QueryEntries() *EntriesQuery {
	return NewFeedsClient(f.config).QueryEntries(f)
}

// Update returns a builder for updating this Feeds.
// Note that you need to call Feeds.Unwrap() before calling this method if this Feeds
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feeds) Update() *FeedsUpdateOne {
	return NewFeedsClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feeds entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feeds) Unwrap() *Feeds {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feeds is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feeds) String() string {
	var builder strings.Builder
	builder.WriteString("Feeds(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("title=")
	builder.WriteString(f.Title)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(f.URL)
	builder.WriteByte(')')
	return builder.String()
}

// FeedsSlice is a parsable slice of Feeds.
type FeedsSlice []*Feeds
