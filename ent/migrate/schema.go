// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EntriesColumns holds the columns for the "entries" table.
	EntriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "published_at", Type: field.TypeTime, Nullable: true},
		{Name: "new", Type: field.TypeBool, Default: true},
		{Name: "feeds_entries", Type: field.TypeInt, Nullable: true},
	}
	// EntriesTable holds the schema information for the "entries" table.
	EntriesTable = &schema.Table{
		Name:       "entries",
		Columns:    EntriesColumns,
		PrimaryKey: []*schema.Column{EntriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "entries_feeds_entries",
				Columns:    []*schema.Column{EntriesColumns[6]},
				RefColumns: []*schema.Column{FeedsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "entries_url_feeds_entries",
				Unique:  true,
				Columns: []*schema.Column{EntriesColumns[3], EntriesColumns[6]},
			},
		},
	}
	// FeedsColumns holds the columns for the "feeds" table.
	FeedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "users_feeds", Type: field.TypeInt, Nullable: true},
	}
	// FeedsTable holds the schema information for the "feeds" table.
	FeedsTable = &schema.Table{
		Name:       "feeds",
		Columns:    FeedsColumns,
		PrimaryKey: []*schema.Column{FeedsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "feeds_users_feeds",
				Columns:    []*schema.Column{FeedsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EntriesTable,
		FeedsTable,
		UsersTable,
	}
)

func init() {
	EntriesTable.ForeignKeys[0].RefTable = FeedsTable
	FeedsTable.ForeignKeys[0].RefTable = UsersTable
}
